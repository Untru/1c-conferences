#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ MkDocs –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
"""

import os
import re
import yaml
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

def extract_event_metadata(file_path: Path) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Markdown —Ñ–∞–π–ª–∞"""
    metadata = {}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ò—â–µ–º YAML front matter
        yaml_match = re.match(r'^---\s*\n(.*?)\n---\s*\n', content, re.DOTALL)
        if yaml_match:
            yaml_content = yaml_match.group(1)
            metadata = yaml.safe_load(yaml_content) or {}
            
        # –ï—Å–ª–∏ –Ω–µ—Ç YAML, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not metadata:
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_match = re.search(r'^#\s*(.+)$', content, re.MULTILINE)
            if title_match:
                metadata['title'] = title_match.group(1).strip()
                
            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
            date_match = re.search(r'(\d{4}-\d{2}-\d{2})', content)
            if date_match:
                metadata['date'] = date_match.group(1)
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        
    return metadata

def scan_events_directory(events_dir: Path) -> List[Dict[str, Any]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    events = []
    
    if not events_dir.exists():
        return events
        
    for year_dir in events_dir.iterdir():
        if year_dir.is_dir() and year_dir.name.isdigit():
            year = year_dir.name
            
            for event_file in year_dir.glob('*.md'):
                if event_file.name == 'index.md':
                    continue
                    
                metadata = extract_event_metadata(event_file)
                if metadata:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    relative_path = event_file.relative_to(events_dir.parent)
                    metadata['file_path'] = str(relative_path)
                    metadata['year'] = year
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç title, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    if 'title' not in metadata:
                        metadata['title'] = event_file.stem.replace('-', ' ').title()
                        
                    events.append(metadata)
    
    return events

def generate_navigation(events: List[Dict[str, Any]]) -> List[Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≥–æ–¥–∞–º
    events_by_year = {}
    for event in events:
        year = event.get('year', 'Unknown')
        if year not in events_by_year:
            events_by_year[year] = []
        events_by_year[year].append(event)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ
    for year in events_by_year:
        events_by_year[year].sort(key=lambda x: x.get('date', ''))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_years = sorted(events_by_year.keys(), reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav = []
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    nav.append({"–ì–ª–∞–≤–Ω–∞—è": "index.md"})
    
    # –°–æ–±—ã—Ç–∏—è
    events_nav = []
    for year in sorted_years:
        year_events = events_by_year[year]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –≥–æ–¥–∞
        events_nav.append({year: f"events/{year}/index.md"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–æ–¥–∞ (–Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ)
        for event in year_events:
            title = event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            file_path = event.get('file_path', '')
            if file_path:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ 2025 –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                clean_title = title.replace(' 2025', '')
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
                events_nav.append({clean_title: file_path})
    
    nav.append({"–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏": events_nav})
    
    # –û –ø—Ä–æ–µ–∫—Ç–µ
    nav.append({"–û –ø—Ä–æ–µ–∫—Ç–µ": "about.md"})
    
    return nav

def update_mkdocs_config(nav: List[Any], config_file: Path = Path('mkdocs.yml')):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MkDocs"""
    
    if not config_file.exists():
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        config['nav'] = nav
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_file = config_file.with_suffix('.yml.backup')
        with open(backup_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
            
        print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {config_file}")
        print(f"üìã –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ MkDocs")
    print("=" * 50)
    
    # –ü—É—Ç–∏
    docs_dir = Path('docs')
    events_dir = docs_dir / 'events'
    
    if not events_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π {events_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π...")
    events = scan_events_directory(events_dir)
    
    if not events:
        print("‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
    for event in events:
        title = event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        date = event.get('date', '–ë–µ–∑ –¥–∞—Ç—ã')
        year = event.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–¥')
        print(f"  - {title} ({date}, {year})")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    print("\nüóÇÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...")
    nav = generate_navigation(events)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    print("\nüìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:")
    print(yaml.dump(nav, default_flow_style=False, allow_unicode=True, sort_keys=False))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüìù –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MkDocs...")
    update_mkdocs_config(nav)
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MkDocs –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

if __name__ == "__main__":
    main()
